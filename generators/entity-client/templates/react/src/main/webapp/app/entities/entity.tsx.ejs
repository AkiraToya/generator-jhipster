<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import React, { useState, useEffect } from 'react';
<%_ if (paginationInfiniteScroll) { _%>
import InfiniteScroll from 'react-infinite-scroll-component';
<%_ } _%>
import { Link, RouteComponentProps } from 'react-router-dom';
import { Button, Card, CardBody, Col, Form, FormGroup, Input, InputGroup, InputGroupText, Label, Row, Table, UncontrolledCollapse } from 'reactstrap';
import {
  <%_ if (blobFields.length > 0) { _%>
    <%_ if (fieldsContainBlobOrImage) { _%>
  openFile,
    <%_ } _%>
  byteSize,
  <%_ } _%>
  Translate<% if (searchEngine) { %>, translate<% } %>
  <% if (fieldsContainDate) { %>, TextFormat<% } %>
  <%_ if (!paginationNo) { _%>
  , getSortState
  <%_ if (paginationPagination) { _%>
  , JhiPagination, JhiItemCount
  <%_ }
  } _%>
  , translate
} from 'react-jhipster-daryl';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

import { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from 'app/config/constants';
<%_ if (!paginationNo) { _%>
import { ASC, DESC, ITEMS_PER_PAGE, SORT } from 'app/shared/util/pagination.constants';
import { overridePaginationStateWithQueryParams } from 'app/shared/util/entity-utils';
<%_ } _%>
import { useAppDispatch, useAppSelector } from 'app/config/store';
<%_ if (fieldsContainDuration) { _%>
import { DurationFormat } from 'app/shared/DurationFormat';
<%_ } _%>

import { I<%= entityReactName %> } from 'app/shared/model/<%= entityModelFileName %>.model';
import {
<%_ if (searchEngine) { _%>
  searchEntities,
<%_ } _%>
  getEntities,
<%_ if (paginationInfiniteScroll) { _%>
  reset,
<%_ } _%>
} from './<%= entityFileName %>.reducer';

import { useSearchPaginationFunction } from 'app/shared/util/useSearchPaginationFunction-utils';

import { useAccessControl } from 'app/shared/auth/useAccessControl';
import { CAPABILITIES } from 'app/shared/auth/capabilites';
import NoAccessPage from 'app/shared/error/no-access-page';
import { AuthAddButton } from 'app/shared/element/AuthAddButton';
import { AuthEditButton } from 'app/shared/element/AuthEditButton';
import { AuthDeleteButton } from 'app/shared/element/AuthDeleteButton';
import { code } from './<%= entityFileName %>-code';

export const <%= entityReactName %> = (props: RouteComponentProps<{url: string}>) => {
  const { hasAccess } = useAccessControl()
  if (!hasAccess(code, CAPABILITIES.VIEW)) return (<NoAccessPage />);

  const baseSearch: I<%= entityReactName %> = { 
    <%_ for (field of fields) { _%>
      <%= field.fieldName %>: undefined,
    <%_ } _%>
  }

  const {searchState, setSearchState,
    paginationState, handlePagination,
    startSearching, clear,
    handleSyncList, sort, dispatch
  } = useSearchPaginationFunction({
    baseSearch,
    props,
    getEntities
  });

  const <%= entityInstance %>List = useAppSelector(state => state.<%= entityReactState %>.entities);
  const loading = useAppSelector(state => state.<%= entityReactState %>.loading);
  <%_ if (!paginationNo) { _%>
  const totalItems = useAppSelector(state => state.<%= entityReactState %>.totalItems);
  <%_ } _%>

  const { match } = props;

  return (
    <div>
      <h2 id="<%= entityFileName %>-heading" data-cy="<%= entityClass %>Heading">
        <Translate contentKey="<%= i18nKeyPrefix %>.home.title"><%= entityClassPluralHumanized %></Translate>
        <div className="d-flex justify-content-end">
          <Button color="primary" id="search-toggler" className="me-2">
            <FontAwesomeIcon icon="search" /><%= `{` %>' '<%= `}` %>
            <Translate contentKey="global.form.search">Search</Translate>
          </Button>
          <Button className="me-2" color="info" onClick={handleSyncList} disabled={loading}>
            <FontAwesomeIcon icon="sync" spin={loading} /> <Translate contentKey="<%= i18nKeyPrefix %>.home.refreshListLabel">Refresh List</Translate>
          </Button>
<%_ if (!readOnly) { _%>
          <AuthAddButton baseUrl={match.url} enabled={hasAccess(code, CAPABILITIES.ADD)}>
            <Translate contentKey="<%= i18nKeyPrefix %>.home.createLabel">Create new <%= entityClassHumanized %></Translate>
          </AuthAddButton>
<%_ } _%>
        </div>
      </h2>
      <Row>
        <Col sm="12">
          <UncontrolledCollapse toggler="#search-toggler">
            <Card>
              <CardBody>
                <Form onSubmit={startSearching}>
                  <FormGroup>
                    <%_ for (field of fields) { 
                      const fieldType=field.fieldType; 
                      const fieldName=field.fieldName; 
                      const fieldIsEnum=field.fieldIsEnum; 
                    _%>
                    <InputGroup>
                      <InputGroupText>{translate('<%= field.fieldTranslationKey %>')}</InputGroupText>
                      <Input type="text" name="search_<%= fieldName %>" defaultValue={searchState.<%= fieldName %>} onChange={(e)=> {
                        setSearchState({ ...searchState, <%= fieldName %>: e.target.value })
                      }} placeholder={translate('<%= `${i18nKeyPrefix}.search.${fieldName}` %>')} />
                    </InputGroup>
                    <br/>
                    <%_ } _%>

                    <InputGroup className="d-flex justify-content-end">
                      <Button className='me-2 btn btn-danger' type="reset" onClick={clear}>
                        <FontAwesomeIcon icon="trash" /><%= `{` %>' '<%= `}` %>
                        <Translate contentKey="global.form.reset">Reset</Translate>
                      </Button>
                    
                      <Button className='me-2 btn btn-info'>
                        <FontAwesomeIcon icon="search" /><%= `{` %>' '<%= `}` %>
                        <Translate contentKey="global.form.search">Search</Translate>
                      </Button>
                    </InputGroup>
                  </FormGroup>
                </Form>
              </CardBody>
            </Card>
          </UncontrolledCollapse>
        </Col>
      </Row>
      <div className="table-responsive">
<%_ if (paginationInfiniteScroll) { _%>
        <InfiniteScroll dataLength={<%= entityInstance %>List ? <%= entityInstance %>List.length : 0} 
                        next={handleLoadMore}
                        hasMore={paginationState.activePage - 1 < links.next}
                        loader={<div className="loader">Loading ...</div>}>
<%_ } _%>
        {
          <%= entityInstance %>List && <%= entityInstance %>List.length > 0 ?(
            <Table responsive>
              <thead>
                <tr>
<%_ for (field of fields) { _%>
                  <th<% if (!paginationNo) { %> className="hand" onClick={sort('<%= field.fieldName %>')} <%_ } _%>><Translate contentKey="<%= `${i18nKeyPrefix}.${field.fieldName}` %>"><%= field.fieldNameHumanized %></Translate><% if (!paginationNo) { %> <FontAwesomeIcon icon="sort" /><% } %></th>
<%_ } _%>
<%_ for (relationship of relationships) { _%>
    <%_ if (relationship.relationshipManyToOne
    || (relationship.relationshipOneToOne && relationship.ownerSide)
    || (relationship.relationshipManyToMany && relationship.ownerSide && paginationNo)) { _%>
                  <th<% if (!paginationNo) { %> <% } %>><Translate contentKey="<%= `${i18nKeyPrefix}.${relationship.relationshipName}` %>"><%= relationship.relationshipNameHumanized %></Translate><% if (!paginationNo) { %> <FontAwesomeIcon icon="sort" /><% } %></th>
    <%_ } _%>
<%_ } _%>
                  <th />
                </tr>
              </thead>
              <tbody>
                {
                  <%= entityInstance %>List.map((<%= entityInstance %>, i) => (
                  <tr key={`entity-${i}`} data-cy="entityTable">
                    <td>
                      <Button tag={Link} to={`/<%= entityPage %>/${<%= entityInstance %>.<%= primaryKey.name %>}`} color="link" size="sm">
                        {<%= entityInstance %>.<%= primaryKey.name %>}
                      </Button>
                    </td>
<%_ for (field of fields) {
  const fieldType = field.fieldType;
  const fieldName = field.fieldName;
  const fieldIsEnum = field.fieldIsEnum;
_%>
  <%_ if (fieldName !== primaryKey.name) { _%>
                    <td>
    <%_ if (field.fieldTypeBoolean) { _%>
                      {<%= entityInstance %>.<%= field.fieldName %> ? 'true' : 'false'}
    <%_ } else if (field.fieldTypeTimed) { _%>
                      {<%= entityInstance %>.<%= fieldName %> ? <TextFormat type="date" value={<%= entityInstance %>.<%= fieldName %>} format={APP_DATE_FORMAT} />: null}
    <%_ } else if (field.fieldTypeDuration) { _%>
                      {<%= entityInstance %>.<%= fieldName %> ? <DurationFormat value={<%= entityInstance %>.<%= fieldName %>} />: null}
    <%_ } else if (field.fieldTypeLocalDate) { _%>
                      {<%= entityInstance %>.<%= fieldName %> ? <TextFormat type="date" value={<%= entityInstance %>.<%= fieldName %>} format={APP_LOCAL_DATE_FORMAT} />: null}
    <%_ } else if (fieldIsEnum && enableTranslation) { _%>
                      <Translate contentKey={`<%= frontendAppName %>.<%= fieldType %>.${<%= entityInstance %>.<%= fieldName %>}`} />
    <%_ } else if (field.fieldTypeBinary) { _%>
      <%_
        // blobFields
        if (!field.blobContentTypeText) {
      _%>
                        {<%= entityInstance %>.<%= fieldName %> ? (
                          <div>
                            {<%= entityInstance %>.<%= fieldName %>ContentType ? (
                              <a onClick={openFile(<%= entityInstance %>.<%= fieldName %>ContentType, <%= entityInstance %>.<%= fieldName %>)}>
        <%_ if (field.blobContentTypeImage) { _%>
                                  <img src={`data:${<%= entityInstance %>.<%= fieldName %>ContentType};base64,${<%= entityInstance %>.<%= fieldName %>}`} style={{ maxHeight: '30px' }} />
        <%_ } else { _%>
                                  <Translate contentKey="entity.action.open">Open</Translate>
        <%_ } _%>
                                &nbsp;
                              </a>
                            ) : null}
                            <span>{<%= entityInstance %>.<%= fieldName %>ContentType}, {byteSize(<%= entityInstance %>.<%= fieldName %>)}</span>
                          </div>
                        ) : null}
      <%_ } else { _%>
                          {<%= entityInstance %>.<%= fieldName %>}
      <%_ } _%>
    <%_ } else { _%>
                      {<%= entityInstance %>.<%= fieldName %>}
    <%_ } _%>
                    </td>
  <%_ } _%>
<%_ } _%>
<%_ for (relationship of relationships) {
  const otherEntity = relationship.otherEntity;
  const ownerSide = relationship.ownerSide;
  const relationshipFieldName = relationship.relationshipFieldName;
  const relationshipFieldNamePlural = relationship.relationshipFieldNamePlural;
  const otherEntityPkName = relationship.otherEntity.primaryKey && relationship.otherEntity.primaryKey.name || 'id';
  const otherEntityStateName = relationship.otherEntityStateName;
  const otherEntityField = relationship.otherEntityField; _%>
  <%_ if (relationship.relationshipManyToOne
  || (relationship.relationshipOneToOne && ownerSide)
  || (relationship.relationshipManyToMany && ownerSide && paginationNo)) { _%>
                    <td>
    <%_ if (relationship.otherEntityUser) { _%>
      <%_ if (relationship.relationshipManyToMany) { _%>
                      {
                        (<%= entityInstance %>.<%= relationshipFieldNamePlural %>) ?
                            (<%= entityInstance %>.<%= relationshipFieldNamePlural %>.map((val, j) =>
                                <span key={j}>{val.<%= otherEntityField %>}{(j === <%= entityInstance %>.<%= relationshipFieldNamePlural %>.length - 1) ? '' : ', '}</span>
                            )
                        ) : null
                      }
      <%_ } else { _%>
                      {<%= entityInstance + "." + relationshipFieldName %> ? <%= entityInstance + "." + relationshipFieldName + "." + otherEntityField %> : ''}
      <%_ } _%>
    <%_ } else { _%>
      <%_ if (relationship.relationshipManyToMany) { _%>
                        {
                          (<%= entityInstance %>.<%= relationshipFieldNamePlural %>) ?
                              (<%= entityInstance %>.<%= relationshipFieldNamePlural %>.map((val, j) =>
                                  <span key={j}><Link to={`/<%= otherEntity.entityPage %>/${val.<%= otherEntity.primaryKey.name %>}`}>{val.<%= otherEntityField %>}</Link>{(j === <%= entityInstance %>.<%= relationshipFieldNamePlural %>.length - 1) ? '' : ', '}</span>
                              )
                          ) : null
                        }
      <%_ } else { _%>
                        {<%= entityInstance + "." + relationshipFieldName %> ?
                        <Link to={`/<%= otherEntity.entityPage %>/${<%= entityInstance + "." + relationshipFieldName + "." + otherEntityPkName + "}" %>`}>
                          {<%= entityInstance + "." + relationshipFieldName + "." + otherEntityField %>}
                        </Link> : ''}
      <%_ } _%>
    <%_ } _%>
                      </td>
  <%_ } _%>
<%_ } _%>
                      <td className="text-end">
                        <div className="btn-group flex-btn-group-container">
                          <Button tag={Link} to={`/<%= entityPage %>/${<%= entityInstance %>.<%= primaryKey.name %>}`} color="info" size="sm" data-cy="entityDetailsButton">
                            <FontAwesomeIcon icon="eye" /> <span className="d-none d-md-inline" ><Translate contentKey="entity.action.view">View</Translate></span>
                          </Button>
<%_ if (!readOnly) { _%>
                          <AuthEditButton baseUrl={match.url} id={<%= entityInstance %>.<%= primaryKey.name %>} paginationState={paginationState} enabled={hasAccess(code,
                            CAPABILITIES.EDIT) } />
                          <AuthDeleteButton baseUrl={match.url} id={<%= entityInstance %>.<%= primaryKey.name %>} paginationState={paginationState} enabled={hasAccess(code,
                            CAPABILITIES.DELETE)} />
<%_ } _%>
                        </div>
                      </td>
                    </tr>
                  ))
                }
              </tbody>
            </Table>
          ) : (
              !loading && <div className="alert alert-warning">
              <Translate contentKey="<%= i18nKeyPrefix %>.home.notFound">
                No <%= entityClassPluralHumanized %> found
              </Translate>
            </div>
          )
        }
<%_ if (paginationInfiniteScroll) { _%>
        </InfiniteScroll>
<%_ } _%>
      </div>
<%_ if (!databaseTypeCassandra) { _%>
  <%_ if (paginationPagination) { _%>
        { totalItems ? (<div className={ <%= entityInstance %>List && <%= entityInstance %>List.length > 0 ? '' : 'd-none' }>
          <div className="justify-content-center d-flex">
            <JhiItemCount
              page={paginationState.activePage}
              total={totalItems}
              itemsPerPage={paginationState.itemsPerPage}
              <% { if (enableTranslation) { %>i18nEnabled<% }} %>
            />
          </div>
          <div className="justify-content-center d-flex">
            <JhiPagination
              activePage={paginationState.activePage}
              onSelect={handlePagination}
              maxButtons={5}
              itemsPerPage={paginationState.itemsPerPage}
              totalItems={totalItems}
            />
          </div>
        </div>) : '' }
  <% } _%>
<%_ } _%>
    </div>
  );
};

export default <%= entityReactName %>;
